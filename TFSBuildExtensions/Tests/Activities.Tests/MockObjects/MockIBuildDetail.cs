//-----------------------------------------------------------------------
// <copyright file="MockIBuildDetail.cs">(c) http://TfsBuildExtensions.codeplex.com/. This source is subject to the Microsoft Permissive License. See http://www.microsoft.com/resources/sharedsource/licensingbasics/sharedsourcelicenses.mspx. All other rights reserved.</copyright>
//-----------------------------------------------------------------------
// <autogenerated/>
namespace TfsBuildExtensions.Activities.Tests
{
    using System;
    using System.ComponentModel;
    using Microsoft.TeamFoundation.Build.Client;
    using System.Collections.ObjectModel;

    public class MockIBuildDetail : IBuildDetail
    {
        private readonly MockIBuildDefinition mib = new MockIBuildDefinition();

        #region IBuildDetail Members

        public void Connect(int pollingInterval, int timeout, System.ComponentModel.ISynchronizeInvoke synchronizingObject)
        {
            throw new NotImplementedException();
        }

        public string LastChangedByDisplayName
        {
            get { throw new NotImplementedException(); }
        }

        public Guid RequestIntermediateLogs()
        {
            throw new NotImplementedException();
        }

        public void Connect(int pollingInterval, ISynchronizeInvoke synchronizingObject)
        {
            throw new NotImplementedException();
        }

        public void Connect()
        {
            throw new NotImplementedException();
        }

        public IBuildDeletionResult Delete()
        {
            throw new NotImplementedException();
        }

        public IBuildDeletionResult Delete(DeleteOptions options)
        {
            throw new NotImplementedException();
        }

        public bool Wait(TimeSpan a, TimeSpan b)
        {
            throw new NotImplementedException();
        }

        public ReadOnlyCollection<int> RequestIds
        {
            get { throw new NotImplementedException(); }
        }

        public ReadOnlyCollection<IQueuedBuild> Requests
        {
            get { throw new NotImplementedException(); }
        }

        public bool Wait(TimeSpan a, TimeSpan b, System.ComponentModel.ISynchronizeInvoke synchronizingObject)
        {
            throw new NotImplementedException();
        }


        public void Disconnect()
        {
            throw new NotImplementedException();
        }

        public void FinalizeStatus()
        {
            throw new NotImplementedException();
        }

        public void FinalizeStatus(BuildStatus status)
        {
            throw new NotImplementedException();
        }

        public void RefreshMinimalDetails()
        {
            throw new NotImplementedException();
        }

        public void RefreshAllDetails()
        {
            throw new NotImplementedException();
        }

        public void Refresh(string[] informationTypes, QueryOptions queryOptions)
        {
            throw new NotImplementedException();
        }

        public void Save()
        {
            throw new NotImplementedException();
        }

        public void Stop()
        {
            throw new NotImplementedException();
        }

        public void Wait()
        {
            throw new NotImplementedException();
        }

        public string BuildNumber { get; set; }

        public BuildPhaseStatus CompilationStatus
        {
            get { throw new NotImplementedException(); }
            set { throw new NotImplementedException(); }
        }

        public string ConfigurationFolderPath
        {
            get { throw new NotImplementedException(); }
        }

        public string DropLocation
        {
            get { throw new NotImplementedException(); }
            set { throw new NotImplementedException(); }
        }

        public string DropLocationRoot
        {
            get { throw new NotImplementedException(); }
        }

        public string LabelName
        {
            get { throw new NotImplementedException(); }
            set { throw new NotImplementedException(); }
        }

        public bool KeepForever
        {
            get { throw new NotImplementedException(); }
            set { throw new NotImplementedException(); }
        }

        public string LogLocation
        {
            get { throw new NotImplementedException(); }
            set { throw new NotImplementedException(); }
        }

        public string Quality
        {
            get { throw new NotImplementedException(); }
            set { throw new NotImplementedException(); }
        }

        public BuildStatus Status
        {
            get { throw new NotImplementedException(); }
            set { throw new NotImplementedException(); }
        }

        public BuildPhaseStatus TestStatus
        {
            get { throw new NotImplementedException(); }
            set { throw new NotImplementedException(); }
        }

        public IBuildAgent BuildAgent
        {
            get { throw new NotImplementedException(); }
        }

        public Uri BuildAgentUri
        {
            get { throw new NotImplementedException(); }
        }

        public IBuildController BuildController
        {
            get { throw new NotImplementedException(); }
        }

        public Uri BuildControllerUri
        {
            get { throw new NotImplementedException(); }
        }

        public IBuildDefinition BuildDefinition
        {
            get { return this.mib; }
        }

        public Uri BuildDefinitionUri
        {
            get { throw new NotImplementedException(); }
        }

        public bool BuildFinished
        {
            get { throw new NotImplementedException(); }
        }

        public IBuildServer BuildServer
        {
            get { throw new NotImplementedException(); }
        }

        public string CommandLineArguments
        {
            get { throw new NotImplementedException(); }
        }

        public IBuildInformation Information
        {
            get { throw new NotImplementedException(); }
        }

        public Uri ConfigurationFolderUri
        {
            get { throw new NotImplementedException(); }
        }

        public string LastChangedBy
        {
            get { throw new NotImplementedException(); }
        }

        public DateTime LastChangedOn
        {
            get { throw new NotImplementedException(); }
        }

        public string ProcessParameters
        {
            get { throw new NotImplementedException(); }
        }

        public BuildReason Reason
        {
            get { throw new NotImplementedException(); }
        }

        public string RequestedBy
        {
            get { throw new NotImplementedException(); }
        }

        public string RequestedFor
        {
            get { throw new NotImplementedException(); }
        }

        public string ShelvesetName
        {
            get { throw new NotImplementedException(); }
        }

        public bool IsDeleted
        {
            get { throw new NotImplementedException(); }
        }

        public string SourceGetVersion
        {
            get { throw new NotImplementedException(); }
            set { throw new NotImplementedException(); }
        }

        public DateTime StartTime
        {
            get { return DateTime.Now; }
        }

        public DateTime FinishTime
        {
            get { throw new NotImplementedException(); }
        }

        public Uri Uri
        {
            get { throw new NotImplementedException(); }
        }

        public string TeamProject
        {
            get { throw new NotImplementedException(); }
        }

        public long? ContainerId
        {
            get { throw new NotImplementedException(); }
        }

        public event StatusChangedEventHandler StatusChanging;
        public event StatusChangedEventHandler StatusChanged;
        public event PollingCompletedEventHandler PollingCompleted;

        #endregion
        
    }
}
